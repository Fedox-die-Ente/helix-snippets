{
    "Player:CanShootWeapon": {
        "prefix": "CanShootWeapon",
        "body": [
            "CanShootWeapon()$0"
        ],
        "description": "Returns true if the player is able to shoot their weapon."
    },

    "Player:ChatNotify": {
        "prefix": "ChatNotify",
        "body": [
            "ChatNotify(${1:message})$0"
        ],
        "description": "Displays a notification for this player in the chatbox."
    },

    "Player:ChatNotifyLocalized": {
        "prefix": "ChatNotifyLocalized",
        "body": [
            "ChatNotifyLocalized(${1:message}, ${2:args})$0"
        ],
        "description": "Displays a notification for this player in the chatbox with the given language phrase."
    },

    "Player:CreateServerRagdoll": {
        "prefix": "CreateServerRagdoll",
        "body": [
            "CreateServerRagdoll(${1:bDontSetPlayer})$0"
        ],
        "description": "Creates a ragdoll entity of this player that will be synced with clients. This does not affect the player like SetRagdolled does."
    },

    "Player:DoStaredAction": {
        "prefix": "DoStaredAction",
        "body": [
            "DoStaredAction(${1:entity}, ${2:callback}, ${3:time}, ${4:onCancel}, ${5:distance})$0"
        ],
        "description": "Performs a time-delay action that requires this player to look at an entity. If this player looks away from the entity before the action timer completes, the action is cancelled. This is usually used in conjunction with SetAction to display progress to the player."
    },

    "Player:ForceSequence": {
        "prefix": "ForceSequence",
        "body": [
            "ForceSequence(${1:sequence}, ${2:callback}, ${3:time}, ${4:bNoFreeze})$0"
        ],
        "description": "Forces this player's model to play an animation sequence. It also prevents the player from firing their weapon while the animation is playing."
    },

    "Player:GetCharacter": {
        "prefix": "GetCharacter",
        "body": [
            "GetCharacter()$0"
        ],
        "description": "Returns this player's currently possessed Character object if it exists."
    },

    "Player:GetItemDropPos": {
        "prefix": "GetItemDropPos",
        "body": [
            "GetItemDropPos(${1:entity})$0"
        ],
        "description": "Returns a good position in front of the player for an entity to be placed. This is usually used for item entities."
    },

    "Player:GetLocalVar": {
        "prefix": "GetLocalVar",
        "body": [
            "GetLocalVar(${1:key}, ${2:default})$0"
        ],
        "description": "Retrieves a local networked variable. If it is not set, it'll return the default that you've specified. Locally networked variables can only be retrieved from the owning player when used from the client."
    },

    "Player:GetName": {
        "prefix": "GetName",
        "body": [
            "GetName()$0"
        ],
        "description": "Returns this player's current name."
    },

    "Player:GetPlayTime": {
        "prefix": "GetPlayTime",
        "body": [
            "GetPlayTime()$0"
        ],
        "description": "Returns the amount of time the player has played on the server."
    },

    "Player:IsFemale": {
        "prefix": "IsFemale",
        "body": [
            "IsFemale()$0"
        ],
        "description": "Returns true if the player currently has a female model. This checks if the model has female, alyx or mossman in its name, or if the player's model class is citizen_female."
    },

    "Player:IsRestricted": {
        "prefix": "IsRestricted",
        "body": [
            "IsRestricted()$0"
        ],
        "description": "Returns true if the player is restricted - that is to say that they are considered \"bound\" and cannot interact with objects normally (e.g hold weapons, use items, etc). An example of this would be a player in handcuffs."
    },

    "Player:IsRunning": {
        "prefix": "IsRunning",
        "body": [
            "IsRunning()$0"
        ],
        "description": "Returns true if the player is running. Running in this case means that their current speed is greater than their regularly set walk speed."
    },

    "Player:IsStuck": {
        "prefix": "IsStuck",
        "body": [
            "IsStuck()$0"
        ],
        "description": "Whether or not this player is stuck and cannot move."
    },

    "Player:IsWepRaised": {
        "prefix": "IsWepRaised",
        "body": [
            "IsWepRaised()$0"
        ],
        "description": "Returns true if the player has their weapon raised."
    },

    "Player:LeaveSequence": {
        "prefix": "LeaveSequence",
        "body": [
            "LeaveSequence()$0"
        ],
        "description": "Forcefully stops this player's model from playing an animation that was started by ForceSequence."
    },

    "Player:Notify": {
        "prefix": "Notify",
        "body": [
            "Notify(${1:message})$0"
        ],
        "description": "Displays a prominent notification in the top-right of this player's screen."
    },

    "Player:NotifyLocalized": {
        "prefix": "NotifyLocalized",
        "body": [
            "NotifyLocalized(${1:message}, ${2:args})$0"
        ],
        "description": "Displays a notification for this player with the given language phrase."
    },

    "Player:PerformInteraction": {
        "prefix": "PerformInteraction",
        "body": [
            "PerformInteraction(${1:time}, ${2:entity}, ${3:callback})$0"
        ],
        "description": "Performs a delayed action that requires this player to hold use on an entity. This is displayed to this player as a closing ring over their crosshair."
    },

    "Player:RequestString": {
        "prefix": "RequestString",
        "body": [
            "RequestString(${1:title}, ${2:subTitle}, ${3:callback}, ${4:default})$0"
        ],
        "description": "Opens up a text box on this player's screen for input and returns the result. Remember to sanitize the user's input if it's needed!"
    },

    "Player:ResetBodygroups": {
        "prefix": "ResetBodygroups",
        "body": [
            "ResetBodygroups()$0"
        ],
        "description": "Resets all bodygroups this player's model has to their defaults (0)."
    },

    "Player:SetAction": {
        "prefix": "SetAction",
        "body": [
            "SetAction(${1:text}, ${2:time}, ${3:callback}, ${4:startTime}, ${5:finishTime})$0"
        ],
        "description": "Displays a progress bar for this player that takes the given amount of time to complete."
    },

    "Player:SetLocalVar": {
        "prefix": "SetLocalVar",
        "body": [
            "SetLocalVar(${1:key}, ${2:value})$0"
        ],
        "description": "Sets the value of a local networked variable."
    },

    "Player:SetRagdolled": {
        "prefix": "SetRagdolled",
        "body": [
            "SetRagdolled(${1:bState}, ${2:time}, ${3:getUpGrace})$0"
        ],
        "description": "Sets this player's ragdoll status."
    },

    "Player:SetRestricted": {
        "prefix": "SetRestricted",
        "body": [
            "SetRestricted(${1:bState}, ${2:bNoMessage})$0"
        ],
        "description": "Sets this player's restricted status."
    },

    "Player:SetWepRaised": {
        "prefix": "SetWepRaised",
        "body": [
            "SetWepRaised(${1:bState}, ${2:weapon})$0"
        ],
        "description": "Sets whether or not this player's current weapon is raised."
    },

    "Player:SyncVars": {
        "prefix": "SyncVars",
        "body": [
            "SyncVars()$0"
        ],
        "description": "Synchronizes networked variables to the client."
    },

    "Player:ToggleWepRaised": {
        "prefix": "ToggleWepRaised",
        "body": [
            "ToggleWepRaised()$0"
        ],
        "description": "Inverts this player's weapon raised state. You should use SetWepRaised instead of this if you already have a reference to this player's current weapon."
    }
}