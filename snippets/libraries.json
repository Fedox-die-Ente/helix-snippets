{
    "ix.act.Register": {
        "prefix": "ix.act.Register",
        "body": [
            "ix.act.Register(${1:name}, ${2:modelClass}, ${3:data})$0"
        ],
        "description": "Registers a sequence as a performable animation."
    },

    "ix.act.Remove": {
        "prefix": "ix.act.Remove",
        "body": [
            "ix.act.Remove(${1:name})$0"
        ],
        "description": "Removes a sequence from being performable if it has been previously registered."
    },

    "ix.anim.GetModelClass": {
        "prefix": "ix.anim.GetModelClass",
        "body": [
            "ix.anim.GetModelClass(${1:model})$0"
        ],
        "description": "Gets a model's animation class."
    },

    "ix.anim.SetModelClass": {
        "prefix": "ix.anim.SetModelClass",
        "body": [
            "ix.anim.SetModelClass(${1:model}, ${2:class})$0"
        ],
        "description": "Sets a model's animation class."
    },

    "ix.char.Create": {
        "prefix": "ix.char.Create",
        "body": [
            "ix.char.Create(${1:data}, ${2:callback})$0"
        ],
        "description": "Creates a character object with its assigned properties and saves it to the database."
    },

    "ix.char.New": {
        "prefix": "ix.char.New",
        "body": [
            "ix.char.New(${1:data}, ${2:id}, ${3:client}, ${4:steamID})$0"
        ],
        "description": "Creates a new empty Character object. If you are looking to create a usable character, see ix.char.Create."
    },

    "ix.char.Restore": {
        "prefix": "ix.char.Restore",
        "body": [
            "ix.char.Restore(${1:client}, ${2:callback}, ${3:bNoCache}, ${4:id})$0"
        ],
        "description": "Loads all of a player's characters into memory."
    },

    "ix.char.RestoreVars": {
        "prefix": "ix.char.RestoreVars",
        "body": [
            "ix.char.RestoreVars(${1:data}, ${2:characterInfo})$0"
        ],
        "description": "Adds character properties to a table. This is done automatically by ix.char.Restore, so that should be used instead if you are loading characters."
    },

    "ix.char.cache": {
        "prefix": "ix.char.cache",
        "body": [
            "ix.char.cache"
        ],
        "description": "Functions similar to ix.char.loaded, but is serverside only. This contains a table of all loaded characters grouped by the SteamID64 of the player that owns them."
    },

    "ix.char.loaded": {
        "prefix": "ix.char.loaded",
        "body": [
            "ix.char.loaded"
        ],
        "description": "Characters that are currently loaded into memory. This is not a table of characters that players are currently using. Characters are automatically loaded when a player joins the server. Entries are not cleared once the player disconnects, as some data is needed after the player has disconnected. Clients will also keep their own version of this table, so don't expect it to be the same as the server's.\nThe keys in this table are the IDs of characters, and the values are the Character objects that the ID corresponds to."
    },

    "ix.char.vars": {
        "prefix": "ix.char.vars",
        "body": [
            "ix.char.vars"
        ],
        "description": "Variables that are stored on characters. This table is populated automatically by ix.char.RegisterVar."
    },

    "ix.chat.Format": {
        "prefix": "ix.chat.Format",
        "body": [
            "ix.chat.Format(${1:text})$0"
        ],
        "description": "Formats a string to fix basic grammar - removing extra spacing at the beginning and end, capitalizing the first character, and making sure it ends in punctuation."
    },

    "ix.chat.Parse": {
        "prefix": "ix.chat.Parse",
        "body": [
            "ix.chat.Parse(${1:client}, ${2:message}, ${3:bNoSend})$0"
        ],
        "description": "Identifies which chat mode should be used."
    },

    "ix.chat.Register": {
        "prefix": "ix.chat.Register",
        "body": [
            "ix.chat.Register(${1:chatType}, ${2:data})$0"
        ],
        "description": "Registers a new chat type with the information provided. Chat classes should usually be created inside of the InitializedChatClasses hook."
    },

    "ix.chat.Send": {
        "prefix": "ix.chat.Send",
        "body": [
            "ix.chat.Send(${1:speaker}, ${2:chatType}, ${3:text}, ${4:bAnonymous}, ${5:receivers}, ${6:data})$0"
        ],
        "description": "Send a chat message using the specified chat type."
    },

    "ix.chat.classes": {
        "prefix": "ix.chat.classes",
        "body": [
            "ix.chat.classes"
        ],
        "description": "List of all chat classes that have been registered by the framework, where each key is the name of the chat class, and value is the chat class data. Accessing a chat class's data is useful for when you want to copy some functionality or properties to use in your own. Note that if you're accessing this table, you should do so inside of the InitializedChatClasses hook."
    },

    "ix.class.CanSwitchTo": {
        "prefix": "ix.class.CanSwitchTo",
        "body": [
            "ix.class.CanSwitchTo(${1:client}, ${2:class})$0"
        ],
        "description": "Determines if a player is allowed to join a specific class."
    },

    "ix.class.Get": {
        "prefix": "ix.class.Get",
        "body": [
            "ix.class.Get(${1:identifier})$0"
        ],
        "description": "Retrieves a class table."
    },

    "ix.class.GetPlayers": {
        "prefix": "ix.class.GetPlayers",
        "body": [
            "ix.class.GetPlayers(${1:class})$0"
        ],
        "description": "Retrieves the players in a class."
    },

    "ix.class.LoadFromDir": {
        "prefix": "ix.class.LoadFromDir",
        "body": [
            "ix.class.LoadFromDir(${1:directory})$0"
        ],
        "description": "Loads classes from a directory."
    },

    "ix.command.Add": {
        "prefix": "ix.command.Add",
        "body": [
            "ix.command.Add(${1:command}, ${2:data})$0"
        ],
        "description": "Creates a new command."
    },

    "ix.command.ExtractArgs": {
        "prefix": "ix.command.ExtractArgs",
        "body": [
            "ix.command.ExtractArgs(${1:text})$0"
        ],
        "description": "Returns a table of arguments from a given string. Words separated by spaces will be considered one argument. To have an argument containing multiple words, they must be contained within quotation marks."
    },

    "ix.command.FindAll": {
        "prefix": "ix.command.FindAll",
        "body": [
            "ix.command.FindAll(${1:identifier}, ${2:bSorted}, ${3:bReorganize}, ${4:bRemoveDupes})$0"
        ],
        "description": "Returns an array of potential commands by unique id. When bSorted is true, the commands will be sorted by name. When bReorganize is true, it will move any exact match to the top of the array. When bRemoveDupes is true, it will remove any commands that have the same NAME."
    },

    "ix.command.FindPlayer": {
        "prefix": "ix.command.FindPlayer",
        "body": [
            "ix.command.FindPlayer(${1:client}, ${2:name})$0"
        ],
        "description": "Attempts to find a player by an identifier. If unsuccessful, a notice will be displayed to the specified player. The search criteria is derived from ix.util.FindPlayer."
    },

    "ix.command.HasAccess": {
        "prefix": "ix.command.HasAccess",
        "body": [
            "ix.command.HasAccess(${1:client}, ${2:command})$0"
        ],
        "description": "Returns true if a player is allowed to run a certain command."
    },

    "ix.command.Parse": {
        "prefix": "ix.command.Parse",
        "body": [
            "ix.command.Parse(${1:client}, ${2:text}, ${3:realCommand}, ${4:arguments})$0"
        ],
        "description": "Parses a chat string and runs the command if one is found. Specifically, it checks for commands in a string with the format /CommandName some arguments."
    },

    "ix.command.Run": {
        "prefix": "ix.command.Run",
        "body": [
            "ix.command.Run(${1:client}, ${2:command}, ${3:arguments})$0"
        ],
        "description": "Forces a player to execute a command by name."
    },

    "ix.command.Send": {
        "prefix": "ix.command.Send",
        "body": [
            "ix.command.Send(${1:command}, ${2:arguments})$0"
        ],
        "description": "Request the server to run a command. This mimics similar functionality to the client typing /CommandName in the chatbox."
    },

    "ix.config.Add": {
        "prefix": "ix.config.Add",
        "body": [
            "ix.config.Add(${1:key}, ${2:value}, ${3:description}, ${4:callback}, ${5:data}, ${6:bNoNetworking}, ${7:bSchemaOnly})$0"
        ],
        "description": "Creates a config option with the given information."
    },

    "ix.config.Get": {
        "prefix": "ix.config.Get",
        "body": [
            "ix.config.Get(${1:key}, ${2:default})$0"
        ],
        "description": "Retrieves a value of a config option. If it is not set, it'll return the default that you've specified."
    },

    "ix.config.Load": {
        "prefix": "ix.config.Load",
        "body": [
            "ix.config.Load()$0"
        ],
        "description": "Loads all saved config options from disk."
    },

    "ix.config.Save": {
        "prefix": "ix.config.Save",
        "body": [
            "ix.config.Save()$0"
        ],
        "description": "Saves all config options to disk."
    },

    "ix.config.Set": {
        "prefix": "ix.config.Set",
        "body": [
            "ix.config.Set(${1:key}, ${2:value})$0"
        ],
        "description": "Sets the value of a config option."
    },

    "ix.config.SetDefault": {
        "prefix": "ix.config.SetDefault",
        "body": [
            "ix.config.SetDefault(${1:key}, ${2:value})$0"
        ],
        "description": "Sets the default value for a config option."
    },

    "ix.currency.Get": {
        "prefix": "ix.currency.Get",
        "body": [
            "ix.currency.Get(${1:amount})$0"
        ],
        "description": "Returns a formatted string according to the current currency."
    },

    "ix.currency.Set": {
        "prefix": "ix.currency.Set",
        "body": [
            "ix.currency.Set(${1:amount}, ${2:singular}, ${3:plural}, ${4:model})$0"
        ],
        "description": "Sets the currency type."
    },

    "ix.currency.Spawn": {
        "prefix": "ix.currency.Spawn",
        "body": [
            "ix.currency.Spawn(${1:pos}, ${2:amount}, ${3:angle})$0"
        ],
        "description": "Spawns an amount of cash at a specific location on the map."
    },

    "ix.data.Delete": {
        "prefix": "ix.data.Delete",
        "body": [
            "ix.data.Delete(${1:key}, ${2:bGlobal}, ${3:bIgnoreMap})$0"
        ],
        "description": "Deletes the contents of a saved file in the data/helix folder."
    },

    "ix.data.Get": {
        "prefix": "ix.data.Get",
        "body": [
            "ix.data.Get(${1:key}, ${2:default}, ${3:bGlobal}, ${4:bIgnoreMap}, ${5:bRefresh})$0"
        ],
        "description": "Retrieves the contents of a saved file in the data/helix folder."
    },

    "ix.data.Set": {
        "prefix": "ix.data.Set",
        "body": [
            "ix.data.Set(${1:key}, ${2:value}, ${3:bGlobal}, ${4:bIgnoreMap})$0"
        ],
        "description": "Populates a file in the data/helix folder with some serialized data."
    },

    "ix.date.Construct": {
        "prefix": "ix.date.Construct",
        "body": [
            "ix.date.Construct(${1:currentDate})$0"
        ],
        "description": "Returns a date object from a table or serialized date."
    },

    "ix.date.Get": {
        "prefix": "ix.date.Get",
        "body": [
            "ix.date.Get()$0"
        ],
        "description": "Returns the currently set date."
    },

    "ix.date.GetFormatted": {
        "prefix": "ix.date.GetFormatted",
        "body": [
            "ix.date.GetFormatted(${1:format}, ${2:currentDate})$0"
        ],
        "description": "Returns a string formatted version of a date."
    },

    "ix.date.GetSerialized": {
        "prefix": "ix.date.GetSerialized",
        "body": [
            "ix.date.GetSerialized(${1:currentDate})$0"
        ],
        "description": "Returns a serialized version of a date. This is useful when you need to network a date to clients, or save a date to disk."
    },

    "ix.date.Initialize": {
        "prefix": "ix.date.Initialize",
        "body": [
            "ix.date.Initialize()$0"
        ],
        "description": "Loads the date from disk."
    },

    "ix.date.ResolveOffset": {
        "prefix": "ix.date.ResolveOffset",
        "body": [
            "ix.date.ResolveOffset()$0"
        ],
        "description": "Updates the internal in-game date/time representation and resets the offset."
    },

    "ix.date.Save": {
        "prefix": "ix.date.Save",
        "body": [
            "ix.date.Save()$0"
        ],
        "description": "Saves the current in-game date to disk."
    },

    "ix.date.Send": {
        "prefix": "ix.date.Send",
        "body": [
            "ix.date.Send(${1:client})$0"
        ],
        "description": "Sends the current date to a player. This is done automatically when the player joins the server."
    },

    "ix.date.UpdateTimescale": {
        "prefix": "ix.date.UpdateTimescale",
        "body": [
            "ix.date.UpdateTimescale(${1:secondsPerMinute})$0"
        ],
        "description": "Updates the time scale of the in-game date/time. The time scale is given in seconds per minute (i.e how many real life seconds it takes for an in-game minute to pass). You should avoid using this function and use the in-game config menu to change the time scale instead."
    },

    "ix.faction.Get": {
        "prefix": "ix.faction.Get",
        "body": [
            "ix.faction.Get(${1:identifier})$0"
        ],
        "description": "Retrieves a faction table."
    },

    "ix.faction.GetIndex": {
        "prefix": "ix.faction.GetIndex",
        "body": [
            "ix.faction.GetIndex(${1:uniqueID})$0"
        ],
        "description": "Retrieves a faction index."
    },

    "ix.faction.HasWhitelist": {
        "prefix": "ix.faction.HasWhitelist",
        "body": [
            "ix.faction.HasWhitelist(${1:faction})$0"
        ],
        "description": "Returns true if a faction requires a whitelist."
    },

    "ix.faction.LoadFromDir": {
        "prefix": "ix.faction.LoadFromDir",
        "body": [
            "ix.faction.LoadFromDir(${1:directory})$0"
        ],
        "description": "Loads factions from a directory."
    },

    "ix.flag.Add": {
        "prefix": "ix.flag.Add",
        "body": [
            "ix.flag.Add(${1:flag}, ${2:description}, ${3:callback})$0"
        ],
        "description": "Creates a flag. This should be called shared in order for the client to be aware of the flag's existence."
    },

    "ix.inventory.Get": {
        "prefix": "ix.inventory.Get",
        "body": [
            "ix.inventory.Get(${1:invID})$0"
        ],
        "description": "Retrieves an inventory table."
    },

    "ix.inventory.Restore": {
        "prefix": "ix.inventory.Restore",
        "body": [
            "ix.inventory.Restore(${1:invID}, ${1:width}, ${1:height}, ${1:callback})$0"
        ],
        "description": "Loads an inventory and associated items from the database into memory. If you are passing a table into invID, it requires a table where the key is the inventory ID, and the value is a table of the width and height values."
    },

    "ix.item.Get": {
        "prefix": "ix.item.Get",
        "body": [
            "ix.item.Get(${1:identifier})$0"
        ],
        "description": "Retrieves an item table."
    },

    "ix.item.Spawn": {
        "prefix": "ix.item.Spawn",
        "body": [
            "ix.item.Spawn(${1:uniqueID}, ${2:position}, ${3:callback}, ${4:angles}, ${5:data})$0"
        ],
        "description": "Instances and spawns a given item type."
    },

    "ix.lang.AddTable": {
        "prefix": "ix.lang.AddTable",
        "body": [
            "ix.lang.AddTable(${1:language}, ${2:data})$0"
        ],
        "description": "Adds phrases to a language. This is used when you aren't adding entries through the files in the languages/ folder. A common use case is adding language phrases in a single-file plugin."
    },

    "ix.lang.LoadFromDir": {
        "prefix": "ix.lang.LoadFromDir",
        "body": [
            "ix.lang.LoadFromDir(${1:directory})$0"
        ],
        "description": "Loads language files from a directory."
    },

    "ix.log.Add": {
        "prefix": "ix.log.Add",
        "body": [
            "ix.log.Add(${1:client}, ${2:logType}, ${3:args})$0"
        ],
        "description": "Add a log message."
    },

    "ix.log.AddType": {
        "prefix": "ix.log.AddType",
        "body": [
            "ix.log.AddType(${1:logType}, ${2:format}, ${3:flag})$0"
        ],
        "description": "Adds a log type."
    },

    "ix.menu.IsOpen": {
        "prefix": "ix.menu.IsOpen",
        "body": [
            "ix.menu.IsOpen()"
        ],
        "description": "Checks whether or not an entity menu is currently open."
    },

    "ix.menu.NetworkChoice": {
        "prefix": "ix.menu.NetworkChoice",
        "body": [
            "ix.menu.NetworkChoice(${1:entity}, ${2:choice}, ${3:data})$0"
        ],
        "description": "Notifies the server of an option that was chosen for the given entity."
    },

    "ix.menu.Open": {
        "prefix": "ix.menu.Open",
        "body": [
            "ix.menu.Open(${1:options}, ${2:entity})$0"
        ],
        "description": "Opens up a context menu for the given entity."
    },

    "ix.util.Notify": {
        "prefix": "ix.util.Notify",
        "body": [
            "ix.util.Notify(${1:message}, ${2:recipient})$0"
        ],
        "description": "Sends a notification to a specified recipient."
    },

    "ix.util.NotifyLocalized": {
        "prefix": "ix.util.NotifyLocalized",
        "body": [
            "ix.util.NotifyLocalized(${1:message}, ${2:recipient}, ${3:args})$0"
        ],
        "description": "Sends a translated notification to a specified recipient."
    },

    "ix.option.Add": {
        "prefix": "ix.option.Add",
        "body": [
            "ix.option.Add(${1:key}, ${2:optionType}, ${3:default}, ${4:data})$0"
        ],
        "description": "Creates a client-side configuration option with the given information."
    },

    "ix.option.Get(client": {
        "prefix": "ix.option.Get",
        "body": [
            "ix.option.Get(${1:client}, ${2:key}, ${3:default})$0"
        ],
        "description": "Retrieves an option value from the specified player. If it is not set, it'll return the default that you've specified. This function will error when an invalid player is passed."
    },

    "ix.option.Get(key": {
        "prefix": "ix.option.Get",
        "body": [
            "ix.option.Get(${1:key}, ${2:default})$0"
        ],
        "description": "Retrieves an option value for the local player. If it is not set, it'll return the default that you've specified."
    },

    "ix.option.GetAll": {
        "prefix": "ix.option.GetAll",
        "body": [
            "ix.option.GetAll()$0"
        ],
        "description": "Returns all of the available options. Note that this does contain the actual values of the options, just their properties."
    },

    "ix.option.GetAllByCategories": {
        "prefix": "ix.option.GetAllByCategories",
        "body": [
            "ix.option.GetAllByCategories(${1:bRemoveHidden})$0"
        ],
        "description": "Returns all of the available options grouped by their categories. The returned table contains category tables, that contain all the options in that category as an array (this is so you can sort them if you'd like)."
    },

    "ix.option.Load": {
        "prefix": "ix.option.Load",
        "body": [
            "ix.option.Load()$0"
        ],
        "description": "Loads all saved options from disk."
    },

    "ix.option.Save": {
        "prefix": "ix.option.Save",
        "body": [
            "ix.option.Save()$0"
        ],
        "description": "Saves all options to disk."
    },

    "ix.option.Set": {
        "prefix": "ix.option.Set",
        "body": [
            "ix.option.Set(${1:key}, ${2:value}, ${3:bNoSave})$0"
        ],
        "description": "Sets an option value for the local player. This function will error when an invalid key is passed."
    },

    "ix.option.Sync": {
        "prefix": "ix.option.Sync",
        "body": [
            "ix.option.Sync()$0"
        ],
        "description": "Syncs all networked options to the server."
    },

    "ix.storage.AddReceiver": {
        "prefix": "ix.storage.AddReceiver",
        "body": [
            "ix.storage.AddReceiver(${1:client}, ${2:inventory}, ${3:bDontSync})$0"
        ],
        "description": "Adds a receiver to a given inventory with a storage context."
    },

    "ix.storage.Close": {
        "prefix": "ix.storage.Close",
        "body": [
            "ix.storage.Close(${1:inventory})$0"
        ],
        "description": "Forcefully makes clients close this inventory if they have it open."
    },

    "ix.storage.CreateContext": {
        "prefix": "ix.storage.CreateContext",
        "body": [
            "ix.storage.CreateContext(${1:inventory}, ${2:info})$0"
        ],
        "description": "Creates a storage context on the given inventory."
    },

    "ix.storage.InUse": {
        "prefix": "ix.storage.InUse",
        "body": [
            "ix.storage.InUse(${1:inventory})$0"
        ],
        "description": "Returns whether or not the given inventory has a storage context and is being looked at by other players."
    },

    "ix.storage.InUseBy": {
        "prefix": "ix.storage.InUseBy",
        "body": [
            "ix.storage.InUseBy(${1:inventory}, ${2:client})$0"
        ],
        "description": "Returns whether or not an inventory is in use by a specific player."
    },

    "ix.storage.Open": {
        "prefix": "ix.storage.Open",
        "body": [
            "ix.storage.Open(${1:client}, ${2:inventory}, ${3:info})$0"
        ],
        "description": "Makes a player open an inventory that they can interact with. This can be called multiple times on the same inventory, if the info passed allows for multiple users."
    },

    "ix.storage.RemoveContext": {
        "prefix": "ix.storage.RemoveContext",
        "body": [
            "ix.storage.RemoveContext(${1:inventory})$0"
        ],
        "description": "Removes a storage context from an inventory if it exists."
    },

    "ix.storage.RemoveReceiver": {
        "prefix": "ix.storage.RemoveReceiver",
        "body": [
            "ix.storage.RemoveReceiver(${1:client}, ${2:inventory}, ${3:bDontRemove})$0"
        ],
        "description": "Removes a storage receiver and removes the context if there are no more receivers."
    },

    "ix.storage.Sync": {
        "prefix": "ix.storage.Sync",
        "body": [
            "ix.storage.Sync(${1:client}, ${2:inventory})$0"
        ],
        "description": "Synchronizes an inventory with a storage context to the given client."
    },

    "ix.util.DimColor": {
        "prefix": "ix.util.DimColor",
        "body": [
            "ix.util.DimColor(${1:color}, ${2:multiplier}, ${3:alpha})$0"
        ],
        "description": "Returns a dimmed version of the given color by the given scale."
    },

    "ix.util.DrawBlur": {
        "prefix": "ix.util.DrawBlur",
        "body": [
            "ix.util.DrawBlur(${1:panel}, ${2:amount}, ${3:passes}, ${4:alpha})$0"
        ],
        "description": "Blurs the content underneath the given panel. This will fall back to a simple darkened rectangle if the player has blurring disabled."
    },

    "ix.util.DrawBlurAt": {
        "prefix": "ix.util.DrawBlurAt",
        "body": [
            "ix.util.DrawBlurAt(${1:x}, ${2:y}, ${3:width}, ${4:height}, ${5:amount}, ${6:passes}, ${7:alpha})$0"
        ],
        "description": "Draws a blurred rectangle with the given position and bounds. This shouldn't be used for panels, see ix.util.DrawBlur instead."
    },

    "ix.util.DrawText": {
        "prefix": "ix.util.DrawText",
        "body": [
            "ix.util.DrawText(${1:text}, ${2:x}, ${3:y}, ${4:color}, ${5:alignX}, ${6:alignY}, ${7:font}, ${8:alpha})$0"
        ],
        "description": "Draws some text with a shadow."
    },

    "ix.util.EmitQueuedSounds": {
        "prefix": "ix.util.EmitQueuedSounds",
        "body": [
            "ix.util.EmitQueuedSounds(${1:entity}, ${2:sounds}, ${3:delay}, ${4:spacing}, ${5:volume}, ${6:pitch})$0"
        ],
        "description": "Emits sounds one after the other from an entity."
    },

    "ix.util.ExpandCamelCase": {
        "prefix": "ix.util.ExpandCamelCase",
        "body": [
            "ix.util.ExpandCamelCase(${1:input}, ${2:bNoUpperFirst})$0"
        ],
        "description": "Returns a string that is the given input with spaces in between each CamelCase word. This function will ignore any words that do not begin with a capital letter. The words ooc, looc, afk, and url will be automatically transformed into uppercase text. This will not capitalize non-ASCII letters due to limitations with Lua's pattern matching."
    },

    "ix.util.FormatStringNamed": {
        "prefix": "ix.util.FormatStringNamed",
        "body": [
            "ix.util.FormatStringNamed(${1:format}, ${2:arguments})$0"
        ],
        "description": "Returns a string that has the named arguments in the format string replaced with the given arguments."
    },

    "ix.util.GetCharacters": {
        "prefix": "ix.util.GetCharacters",
        "body": [
            "ix.util.GetCharacters()$0"
        ],
        "description": "Returns an iterator for characters. The resulting key/values will be a player and their corresponding characters. This iterator skips over any players that do not have a valid character loaded."
    },

    "ix.util.GetMaterial": {
        "prefix": "ix.util.GetMaterial",
        "body": [
            "ix.util.GetMaterial(${1:materialPath})$0"
        ],
        "description": "Returns a cached copy of the given material, or creates and caches one if it doesn't exist. This is a quick helper function if you aren't locally storing a Material() call."
    },

    "ix.util.GetStringTime": {
        "prefix": "ix.util.GetStringTime",
        "body": [
            "ix.util.GetStringTime(${1:text})$0"
        ],
        "description": "Gets the amount of seconds from a given formatted string. If no time units are specified, it is assumed minutes. The valid values are as follows:\ns - Seconds\nm - Minutes\nh - Hours\nd - Days\nw - Weeks\nmo - Months\ny - Years"
    },

    "ix.util.GetTypeFromValue": {
        "prefix": "ix.util.GetTypeFromValue",
        "body": [
            "ix.util.GetTypeFromValue(${1:value})$0"
        ],
        "description": "Returns the ix.type of the given value."
    },

    "ix.util.GetUTCTime": {
        "prefix": "ix.util.GetUTCTime",
        "body": [
            "ix.util.GetUTCTime()$0"
        ],
        "description": "Gets the current time in the UTC time-zone."
    },

    "ix.util.Include": {
        "prefix": "ix.util.Include",
        "body": [
            "ix.util.Include(${1:fileName}, ${2:realm})$0"
        ],
        "description": "Includes a lua file based on the prefix of the file. This will automatically call include and AddCSLuaFile based on the current realm. This function should always be called shared to ensure that the client will receive the file from the server."
    },

    "ix.util.IncludeDir": {
        "prefix": "ix.util.IncludeDir",
        "body": [
            "ix.util.IncludeDir(${1:directory}, ${2:bFromLua})$0"
        ],
        "description": "Includes multiple files in a directory."
    },

    "ix.util.IsColor": {
        "prefix": "ix.util.IsColor",
        "body": [
            "ix.util.IsColor(${1:input})$0"
        ],
        "description": "Returns true if the given input is a color table. This is necessary since the engine IsColor function only checks for color metatables - which are not used for regular Lua color types."
    },

    "ix.util.MetatableSafeTableMerge": {
        "prefix": "ix.util.MetatableSafeTableMerge",
        "body": [
            "ix.util.MetatableSafeTableMerge(${1:destination}, ${2:source})$0"
        ],
        "description": "Merges the contents of the second table with the content in the first one. The destination table will be modified. If element is table but not metatable object, value's elements will be changed only."
    },

    "ix.util.PushBlur": {
        "prefix": "ix.util.PushBlur",
        "body": [
            "ix.util.PushBlur(${1:drawFunc})$0"
        ],
        "description": "Pushes a 3D2D blur to be rendered in the world. The draw function will be called next frame in the PostDrawOpaqueRenderables hook."
    },

    "ix.util.ResetStencilValues": {
        "prefix": "ix.util.ResetStencilValues",
        "body": [
            "ix.util.ResetStencilValues()$0"
        ],
        "description": "Resets all stencil values to known good (i.e defaults)."
    },

    "ix.util.SanitizeType": {
        "prefix": "ix.util.SanitizeType",
        "body": [
            "ix.util.SanitizeType(${1:type}, ${2:input})$0"
        ],
        "description": "Sanitizes an input value with the given type. This function ensures that a valid type is always returned. If a valid value could not be found, it will return the default value for the type. This only works for simple types - e.g it does not work for player, character, or Steam ID types."
    },

    "ix.util.StringMatches": {
        "prefix": "ix.util.StringMatches",
        "body": [
            "ix.util.StringMatches(${1:a}, ${2:b})$0"
        ],
        "description": "Checks to see if two strings are equivalent using a fuzzy manner. Both strings will be lowered, and will return true if the strings are identical, or if b is a substring of a."
    },

    "ix.util.StripRealmPrefix": {
        "prefix": "ix.util.StripRealmPrefix",
        "body": [
            "ix.util.StripRealmPrefix(${1:name})$0"
        ],
        "description": "Removes the realm prefix from a file name. The returned string will be unchanged if there is no prefix found."
    },

    "ix.util.WrapText": {
        "prefix": "ix.util.WrapText",
        "body": [
            "ix.util.WrapText(${1:text}, ${2:maxWidth}, ${3:font})$0"
        ],
        "description": "Wraps text so it does not pass a certain width. This function will try and break lines between words if it can, otherwise it will break a word if it's too long."
    }
}